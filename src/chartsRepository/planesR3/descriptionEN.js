import FormulaTable from 'utils/formulaTable';
import ListConsiderations from 'utils/listConsiderations';
var Latex = require('react-latex');

const description = <div>
  <p>
    <b>Definition</b>: Given <Latex>{"$P$ and $A, B$ in $R_n$"}</Latex>. The set of all points in <Latex>{"$P + sA + tB$, $s, t \\in \\reals$"}</Latex> is a plane which crosses through <Latex>{"$P$"}</Latex> and is parallel to <Latex>{"$sA + tB$"}</Latex>.
  </p>
  <ListConsiderations data={[
    <>
      Two planes <Latex>{"$M_1 = \\{P + sA + tB \\}$"}</Latex> and <Latex>{"$M_2 = \\{P + sC + tD \\}$"}</Latex> which cross through the same <Latex>{"$P$"}</Latex> point are equal if the linear span of <Latex>{"$A$ and $B$"}</Latex> matches with the linear span of <Latex>{"$C$ and $D$"}</Latex>. It can be understood like the "inclination" of the plane defined by the linear combination of those director vectors.
    </>,
    <>
      Two planes <Latex>{"$M_1 = \\{P + sA + tB \\}$"}</Latex> and <Latex>{"$M_2 = \\{Q + sA + tB \\}$"}</Latex> generated by the same <Latex>{"$A$ and $B$"}</Latex> vectors are equal if <Latex>{"$Q$"}</Latex> is in <Latex>{"$M_1$"}</Latex>. It makes sense due to the fact that if <Latex>{"$Q$"}</Latex> is not in <Latex>{"$M_1$"}</Latex> both planes would be parallel but not equal.
    </>,
    <>
      Three different points generate two lines. Two lines generate a plane <Latex>{"$M = \\{P + s(Q - P) + t(R - P) \\}$"}</Latex>. Similarly as we did with lines, first we generate the lines which can define the inclination of the plane, and after that we generate the plane. <Latex>{"$C$ and $D$"}</Latex> have to be linearly independent, so the points <Latex>{"$P$, $Q$ and $R$"}</Latex> shouldn't be in the same line.
    </>
  ]} />
  <p>Again, we can extend this concept to a cartesian version. Let's do the same proccess we did with the lines.</p>
  <FormulaTable enableScroll data={[
    "$M = \\{P + sA + tB \\}$",
    "$P = (p_1, p_2, p_3) $, $A = (a_1, a_2, a_3) $, $B = (b_1, b_2, b_3)$",
    "$x = p_1 + sa_1 + tb_1$",
    "$y = p_2 + sa_2 + tb_2$",
    "$z = p_3 + sa_3 + tb_3$",
  ]} />
  <p>The parameters <Latex>{"$s$ and $t$"}</Latex> can always be eliminated from these equations, getting a cartesian equation with the form <Latex>{"$ax +by + cz = d$"}</Latex>. Let's see it with an example:</p>
  <FormulaTable enableScroll data={[
    "$P = (1, 2, 3) $, $A = (1, 2, 1) $, $B = (1, 4, -1)$",
    "$M = (1,2,3) + s(1,2,1) + t(1,4,-1)$",
    "$   $",
    "1. $x = 1 + s + t$ â†’ $x - 1 = s + t$",
    "2. $z = 3 + s - t$ â†’ $z - 3 = s - t$",
    "3. $y = 2 + 2s - 4t$",
    "$  $",
    "1. $+$ 2. $: x + z - 4 = 2s$",
    "1. $-$ 2. $: x - z + 2 = 2t$",
    "replace in 3.",
    "$ $",
    "$y = 2 + (x + z -4) - (2x - 2z + 4)$",
    "$y = -x +3z - 6$",
    "$x + y -3z = -6$ cool :)",
  ]} />
  <hr />
  <p>Following the ideas developed in the lines section we can imagine a similar implementation to generate a plane with a <b>normal vector</b>. The problem here is that we will need two vectors as we have seen, and the trouble is because we need a normal vector which is <b>orthogonal to both</b>. To do that we have to introduce a new concept named <b>cross product</b>:</p>
  <p><b>Definition</b>: Given <Latex>{"$A = (a_1, a_2, a_3)$ and $B = (b_1, b_2, b_3)$"}</Latex> vectors in <Latex>{"$\\reals^3$"}</Latex></p>
  <FormulaTable enableScroll data={[
    "$A \\times B = (a_2b_3 - a_3b_2, a_3b_1 - a_1b_3, a_1b_2 - a_2b_1)$",
  ]} />
  <p><b>What the fuck is this?</b> I can't understand how those wiz created these equations. Anyway, it is so useful because it satisfies our needings. Let's check again with an example. As we could see previously, two vectors are orthogonal if their internal product <Latex>{"$= 0$"}</Latex>, so:</p>
  <FormulaTable enableScroll data={[
    "$A \\cdot (A \\times B) = (a_1, a_2, a_3) \\cdot (a_2b_3 - a_3b_2, a_3b_1 - a_1b_3, a_1b_2 - a_2b_1) $",
    "$= a_1(a_2b_3 - a_3b_2) + a_2(a_3b_1 - a_1b_3) + a_3(a_1b_2 - a_2b_1)$",
    "$= a_1a_2b_3 - a_1a_3b_2 + a_2a_3b_1 - a_2a_1b_3 + a_3a_1b_2 - a_3a_2b_1$",
    "$= 0$ â™¥",
  ]} />
  <p>It also works for <Latex>{"$B \\cdot (A \\times B)$"}</Latex>. It is exactly what we were looking for because <Latex>{"$A \\times B$"}</Latex> is orthogonal to both <Latex>{"$A, B$"}</Latex>. <Latex>{"$A \\times B$"}</Latex> will be our normal vector. But, before going further let's note cross product properties:</p>
  <ListConsiderations data={[
    <><Latex>{"$A \\times B = -(B \\times A)$"}</Latex></>,
    <><Latex>{"$A \\times (B + C) = (A \\times B) + (A \\times C)$"}</Latex></>,
    <><Latex>{"$c(A \\times B) = (cA) \\times B$"}</Latex></>,
    <><Latex>{"$A \\cdot (A \\times B) = 0$"}</Latex></>,
    <><Latex>{"$B \\cdot (A \\times B) = 0$"}</Latex></>,
    <><Latex>{"$(A \\times B) \\times C$ â‰  $A \\times (B \\times C)$"}</Latex></>,
    <><Latex>{"$\\rVert A \\times B \\lVert^2 = \\rVert A \\lVert^2 \\rVert B \\lVert^2 - (A \\cdot B)^2 $"}</Latex></>,
  ]} />
  <p>The last is named <a href="https://pythonandfamilywebsites-storage.s3.us-east-2.amazonaws.com/InkedIMG_20230515_112558-min.jpg" target='__blank'><b>Lagrange Identity</b></a> and it is important to note another property <Latex>{"$A \\times B = 0$"}</Latex> if <Latex>{"$A, B$"}</Latex> are <b>linearly dependant</b>. If we remember the Cauchy-Schwarz inequlity, the equal sign is valid if <Latex>{"$B = cA$"}</Latex>, so in that scenario we can replace</p>
  <FormulaTable enableScroll data={[
    "$\\lvert A \\cdot B \\lvert = \\lVert A \\rVert \\lVert B \\rVert$ in",
    "$\\rVert A \\times B \\lVert^2 = \\rVert A \\lVert^2 \\rVert B \\lVert^2 - (A \\cdot B)^2 $",
    "$\\rVert A \\times B \\lVert^2 = \\rVert A \\lVert^2 \\rVert B \\lVert^2 - (\\rVert A \\lVert \\rVert B \\lVert)^2 $",
    "$\\rVert A \\times B \\lVert^2 = 0$ if",
    "$A \\times B = 0$",
  ]} />
  <p>It means that if both vectors are scalar multiples of each other <Latex>{"$A \\times B = 0$"}</Latex> is telling us that they are linearly dependant. Also if we remember projections and angles we found that <Latex>{"$A \\cdot B = \\lVert A \\lVert \\lVert B \\lVert cos\\theta$"}</Latex>, so if we replace here:</p>
  <FormulaTable enableScroll data={[
    "$\\rVert A \\times B \\lVert^2 = \\lVert A \\lVert^2 \\lVert B \\lVert^2 - (\\lVert A \\lVert \\lVert B \\lVert cos\\theta)^2$",
    "$\\rVert A \\times B \\lVert^2 = \\lVert A \\lVert^2 \\lVert B \\lVert^2 (1 - cos^2\\theta)$",
    "$\\rVert A \\times B \\lVert^2 = \\lVert A \\lVert^2 \\lVert B \\lVert^2 sen^2\\theta$",
    "$\\rVert A \\times B \\lVert = \\lVert A \\lVert \\lVert B \\lVert sen\\theta$",
  ]} />
  <hr />
  <p>
    Great! (this is taking us a lot of time ðŸ˜‚).  We learnt about the cross product, and now we know that it works as our normal vector. Let's see how can we define a plane using it. Similary with lines <Latex>{"$(X - P) \\cdot N = 0$"}</Latex> will define a plane in <Latex>{"$\\Reals^3$"}</Latex> because we follow the same idea, if <Latex>{"$X$ and $P$"}</Latex> are in the same plane their <Latex>{"$(X - P)$"}</Latex> will be too, and it will generate a vector from the origin which is orthogonal to <Latex>{"$N$"}</Latex>. In other words, all the points which satisfy the equation will be in the plane. So let's suppose:
  </p>
  <FormulaTable enableScroll data={[
    "$N=(a,b,c)$, $X=(x,y,z)$, $P=(x_1,y_1,z_1)$",
    "$(X - P) \\cdot N = 0$",
    "$((x,y,z)-(x_1,y_1,z_1)) \\cdot (a,b,c) = 0$",
    "$(x-x_1, y-y_1, z-z_1) \\cdot (a,b,c) = 0$",
    "$a(x-x_1) + b(y-y_1) + c(z-z_1) = 0$",
  ]} />
  <p>But, it is also true that</p>
  <FormulaTable enableScroll data={[
    "$(X - P) \\cdot N = 0$",
    "$X \\cdot N = P \\cdot N$",
    "$ax + by + cz = d1$;  $d1 = ax_1 + by_1 + cz_1$",
  ]} />
  <p>As we could conclude in Lines <Latex>{"$\\Reals^3$"}</Latex> section, we got an equation to calculate the distance from the origin to a plane <Latex>{"$d = \\frac {\\lvert P \\cdot N \\rvert}{\\lVert N \\rVert}$"}</Latex>. As we could see <Latex>{"$d1 = P \\cdot N$"}</Latex>, so <Latex>{"$d1 = d \\lVert N \\rVert$"}</Latex>. <Latex>{"$d1 = d$"}</Latex> if <Latex>{"$N = 1$"}</Latex>. The plane crosses through the origin if <Latex>{"$d1 = 0$"}</Latex></p>
  <p><b>Example</b>: The cartesian equation <Latex>{"$2x + 6y + 3z = 6$"}</Latex> represents a plane with normal vector <Latex>{"$N = 2i + 6j + 3k$"}</Latex>.</p>
  <p>Let's analice this statement. As we learnt previously <Latex>{"$X \\cdot N = P \\cdot N$"}</Latex>.</p>
  <ul>
    <li>
      The first part matches with <Latex>{"$2x + 6y + 3z$"}</Latex>. That's the reason the statement says that the normal vector is <Latex>{"$2i + 6j + 3k$"}</Latex>
    </li>
    <li>
      It means that the second part is <Latex>{"$P \\cdot N = 6$"}</Latex>
    </li>
  </ul>
  <p>With that information we can use our equation to calculate the distance from the origin to the plane</p>
  <FormulaTable enableScroll data={[
    "$d = \\frac {\\lvert P \\cdot N \\rvert}{\\lVert N \\rVert}$",
    "$d = \\frac{6}{\\lVert 2i + 6j + 3k \\rVert}$",
    "$d = \\frac{6}{7}$",
  ]} />
  <p>Finally, we can get the plate interceptions with axes dividing the equation by <Latex>{"$P \\cdot N$"}</Latex>. In our example it will result in <Latex>{"$x/3 + y/1 + z/2 = 1$"}</Latex>, where <Latex>{"$(3,0,0)$, $(0,1,0)$ ,$(0,0,2)$"}</Latex> are the interceptions with the axes.</p>
</div>


const miniDescription = <div>
  <p>
    Following the idea exposed with Lines in <Latex>{"$\\Reals^3$"}</Latex>, planes are the <b>sum</b> of <Latex>{"$P$"}</Latex> and the <b>linear span</b> of <Latex>{"$A$ and $B$"}</Latex>, so you can generate the points <Latex>{"$M$ in $\\reals^n$"}</Latex> of a plane with <Latex>{"$M = \\{P + sA + tB | s, t \\in \\reals \\}$"}</Latex>. It is important to remember the Paralelogram law because if we note, giving different values to <Latex>{"$s$ and $t$"}</Latex> you can go over all the possible directions in the plane by  generating different sums of <Latex>{"$A$ and $B$"}</Latex>.
  </p>
  <p>
    The previous idea makes us think and conclude some considerations:
  </p>
  <ul>
    <li>
      <Latex>{"$A$ and $B$"}</Latex> should be linearly independent to be able to generate different directions after applying the paralelogram law.
    </li>
    <li>
      I we assign values which <Latex>{"$s = t$"}</Latex> we will generate a line.
    </li>
    <li>
      Neither <Latex>{"$A$ nor $B$"}</Latex> must be null vectors.
    </li>
    <li>
      If <Latex>{"$P$"}</Latex> is the origin, the plane is the linear span of <Latex>{"$A$ and $B$"}</Latex>.
    </li>
  </ul>
  <p>As we can see in our chart, the infinite points generated by our equation create the plane.</p>
</div>

export { description, miniDescription };
